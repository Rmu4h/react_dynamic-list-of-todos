{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","search","filterBy","handleInput","event","setState","target","value","handleSelect","getPreparedTodos","todos","props","filter","todo","title","includes","completed","this","onUserSelect","selectedUserId","preparedTodos","className","type","placeholder","onChange","map","classNames","htmlFor","id","checked","readOnly","userId","onClick","React","Component","API_URL","getTodos","a","fetch","result","json","getUser","CurrentUser","user","clearUser","loadUser","prevProps","name","email","phone","App","newUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.62feb026.chunk.js","sourcesContent":["import classNames from 'classnames';\n\nimport React from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  onUserSelect: (newUserId: number) => void,\n  selectedUserId: number,\n};\n\ntype State = {\n  search: string,\n  filterBy: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    search: '',\n    filterBy: 'no-filter',\n  };\n\n  handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ search: event.target.value });\n  };\n\n  handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({ filterBy: event.target.value });\n  };\n\n  getPreparedTodos = () => {\n    let { todos } = this.props;\n\n    if (this.state.search) {\n      todos = this.props.todos.filter(todo => todo.title.includes(this.state.search));\n    }\n\n    if (this.state.filterBy !== 'no-filter') {\n      todos = (this.state.filterBy === 'completed')\n        ? todos.filter(todo => todo.completed)\n        : todos.filter(todo => !todo.completed);\n    }\n\n    return todos;\n  };\n\n  render() {\n    const { onUserSelect, selectedUserId } = this.props;\n    const preparedTodos = this.getPreparedTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"Search...\"\n            value={this.state.search}\n            onChange={this.handleInput}\n            className=\"form-control\"\n          />\n          <select\n            value={this.state.filterBy}\n            onChange={this.handleSelect}\n            className=\"form-select\"\n          >\n            <option value=\"no-filter\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"completed\">completed</option>\n          </select>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {preparedTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--checked': todo.completed },\n                  { 'TodoList__item--unchecked': !todo.completed },\n                )}\n              >\n                <label htmlFor=\"isCompleted\">\n                  <input\n                    id=\"isCompleted\"\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'button',\n                    'TodoList__user-button',\n                    { 'TodoList__user-button--selected': todo.userId === selectedUserId },\n                  )}\n                  type=\"button\"\n                  onClick={() => onUserSelect(todo.userId)}\n                >\n                  {`User\\xa0#${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const API_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos() {\n  const result = await fetch(`${API_URL}/todos`);\n\n  return result.json();\n}\n\nexport async function getUser(userId: number) {\n  const result = await fetch(`${API_URL}/users/${userId}`);\n\n  return result.json();\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedUserId: number,\n  onUserSelect: (newUserId: number) => void,\n};\n\ntype State = {\n  user: User | null,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    this.loadUser();\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      this.loadUser();\n    }\n  }\n\n  clearUser = () => {\n    this.props.onUserSelect(0);\n  };\n\n  async loadUser() {\n    const user = await getUser(this.props.selectedUserId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      user && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${user.id}`}\n            </span>\n          </h2>\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n          <button\n            type=\"button\"\n            onClick={this.clearUser}\n            className=\"button\"\n          >\n            Clear\n          </button>\n        </div>\n      )\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  onUserSelect = (newUserId: number) => {\n    this.setState({ selectedUserId: newUserId });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onUserSelect={this.onUserSelect}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                onUserSelect={this.onUserSelect}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}